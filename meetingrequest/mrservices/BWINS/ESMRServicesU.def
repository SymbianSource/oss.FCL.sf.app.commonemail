EXPORTS
	?GetFirstInstanceTimeL@CESMRRecurrenceInfoHandler@@QAEXAAVTCalTime@@0@Z @ 1 NONAME ; void CESMRRecurrenceInfoHandler::GetFirstInstanceTimeL(class TCalTime &, class TCalTime &)
	??1CESMRCalImportExporter@@UAE@XZ @ 2 NONAME ; CESMRCalImportExporter::~CESMRCalImportExporter(void)
	??1CESMRCalUserUtil@@UAE@XZ @ 3 NONAME ; CESMRCalUserUtil::~CESMRCalUserUtil(void)
	?SetRecurrenceL@CESMRRecurrenceInfoHandler@@QAEXW4TESMRRecurrenceValue@@VTTime@@@Z @ 4 NONAME ; void CESMRRecurrenceInfoHandler::SetRecurrenceL(enum TESMRRecurrenceValue, class TTime)
	?IsAlldayEventL@CESMRCalUserUtil@@QBEHXZ @ 5 NONAME ; int CESMRCalUserUtil::IsAlldayEventL(void) const
	?NewLC@CESMRAlarmInfoHandler@@SAPAV1@XZ @ 6 NONAME ; class CESMRAlarmInfoHandler * CESMRAlarmInfoHandler::NewLC(void)
	?GetAbsoluteAlarmTimeL@CESMRAlarmInfoHandler@@QAEXAAVCCalEntry@@AAVTTime@@@Z @ 7 NONAME ; void CESMRAlarmInfoHandler::GetAbsoluteAlarmTimeL(class CCalEntry &, class TTime &)
	?FindInstancesForEntryL@CESMRConflictChecker@@QAEXVTTime@@0ABVCCalEntry@@EAAV?$RPointerArray@VCCalEntry@@@@@Z @ 8 NONAME ; void CESMRConflictChecker::FindInstancesForEntryL(class TTime, class TTime, class CCalEntry const &, unsigned char, class RPointerArray<class CCalEntry> &)
	?AddExceptionL@CESMRRecurrenceInfoHandler@@QAEXVTCalTime@@0@Z @ 9 NONAME ; void CESMRRecurrenceInfoHandler::AddExceptionL(class TCalTime, class TCalTime)
	?NewLC@CESMRCalImportExporter@@SAPAV1@XZ @ 10 NONAME ; class CESMRCalImportExporter * CESMRCalImportExporter::NewLC(void)
	?NewL@CESMRCalImportExporter@@SAPAV1@XZ @ 11 NONAME ; class CESMRCalImportExporter * CESMRCalImportExporter::NewL(void)
	?NewL@CESMRAlarmInfoHandler@@SAPAV1@XZ @ 12 NONAME ; class CESMRAlarmInfoHandler * CESMRAlarmInfoHandler::NewL(void)
	?ReadFromResourceL@CESMRAlarmInfoHandler@@QAEXABVTDesC16@@H@Z @ 13 NONAME ; void CESMRAlarmInfoHandler::ReadFromResourceL(class TDesC16 const &, int)
	?RemoveInstanceL@CESMRRecurrenceInfoHandler@@QAEXVTCalTime@@@Z @ 14 NONAME ; void CESMRRecurrenceInfoHandler::RemoveInstanceL(class TCalTime)
	?GetAttendeesL@CESMRCalUserUtil@@QBEXAAV?$RArray@PAVCCalAttendee@@@@I@Z @ 15 NONAME ; void CESMRCalUserUtil::GetAttendeesL(class RArray<class CCalAttendee *> &, unsigned int) const
	?CopyRecurrenceInformationToL@CESMRRecurrenceInfoHandler@@QAEXAAVCCalEntry@@@Z @ 16 NONAME ; void CESMRRecurrenceInfoHandler::CopyRecurrenceInformationToL(class CCalEntry &)
	?GetAlarmInfoObjectL@CESMRAlarmInfoHandler@@QAEXABVCCalEntry@@AAVTESMRAlarmInfo@@@Z @ 17 NONAME ; void CESMRAlarmInfoHandler::GetAlarmInfoObjectL(class CCalEntry const &, class TESMRAlarmInfo &)
	??1CESMRAlarmInfoHandler@@UAE@XZ @ 18 NONAME ; CESMRAlarmInfoHandler::~CESMRAlarmInfoHandler(void)
	?NewL@CESMRRecurrenceInfoHandler@@SAPAV1@AAVCCalEntry@@PAVMESMRCalDbMgr@@@Z @ 19 NONAME ; class CESMRRecurrenceInfoHandler * CESMRRecurrenceInfoHandler::NewL(class CCalEntry &, class MESMRCalDbMgr *)
	?PhoneOwnerRoleL@CESMRCalUserUtil@@QBE?AW4TESMRRole@@XZ @ 20 NONAME ; enum TESMRRole CESMRCalUserUtil::PhoneOwnerRoleL(void) const
	?NewLC@CESMRCalUserUtil@@SAPAV1@AAVCCalEntry@@@Z @ 21 NONAME ; class CESMRCalUserUtil * CESMRCalUserUtil::NewLC(class CCalEntry &)
	??1CESMRRecurrenceInfoHandler@@UAE@XZ @ 22 NONAME ; CESMRRecurrenceInfoHandler::~CESMRRecurrenceInfoHandler(void)
	?FindConflictsL@CESMRConflictChecker@@QAEXABVCCalEntry@@AAV?$RPointerArray@VCCalEntry@@@@@Z @ 23 NONAME ; void CESMRConflictChecker::FindConflictsL(class CCalEntry const &, class RPointerArray<class CCalEntry> &)
	?NewL@CESMRConflictChecker@@SAPAV1@AAVMESMRCalDbMgr@@@Z @ 24 NONAME ; class CESMRConflictChecker * CESMRConflictChecker::NewL(class MESMRCalDbMgr &)
	?CopyRecurrenceInformationFromL@CESMRRecurrenceInfoHandler@@QAEXABVCCalEntry@@@Z @ 25 NONAME ; void CESMRRecurrenceInfoHandler::CopyRecurrenceInformationFromL(class CCalEntry const &)
	?NewLC@CESMRRecurrenceInfoHandler@@SAPAV1@AAVCCalEntry@@@Z @ 26 NONAME ; class CESMRRecurrenceInfoHandler * CESMRRecurrenceInfoHandler::NewLC(class CCalEntry &)
	?GetRecurrenceL@CESMRRecurrenceInfoHandler@@QBEXAAW4TESMRRecurrenceValue@@AAVTTime@@@Z @ 27 NONAME ; void CESMRRecurrenceInfoHandler::GetRecurrenceL(enum TESMRRecurrenceValue &, class TTime &) const
	??1CESMRConflictChecker@@UAE@XZ @ 28 NONAME ; CESMRConflictChecker::~CESMRConflictChecker(void)
	?NewL@CESMRCalUserUtil@@SAPAV1@AAVCCalEntry@@@Z @ 29 NONAME ; class CESMRCalUserUtil * CESMRCalUserUtil::NewL(class CCalEntry &)
	?NewLC@CESMRRecurrenceInfoHandler@@SAPAV1@AAVCCalEntry@@PAVMESMRCalDbMgr@@@Z @ 30 NONAME ; class CESMRRecurrenceInfoHandler * CESMRRecurrenceInfoHandler::NewLC(class CCalEntry &, class MESMRCalDbMgr *)
	?NewL@CESMRRecurrenceInfoHandler@@SAPAV1@AAVCCalEntry@@@Z @ 31 NONAME ; class CESMRRecurrenceInfoHandler * CESMRRecurrenceInfoHandler::NewL(class CCalEntry &)
	?GetNextInstanceTimeL@CESMRRecurrenceInfoHandler@@QAEXAAVTCalTime@@0VTTime@@@Z @ 32 NONAME ; void CESMRRecurrenceInfoHandler::GetNextInstanceTimeL(class TCalTime &, class TCalTime &, class TTime)
	?GetPreviousInstanceTimeL@CESMRRecurrenceInfoHandler@@QAEXAAVTCalTime@@0VTTime@@@Z @ 33 NONAME ; void CESMRRecurrenceInfoHandler::GetPreviousInstanceTimeL(class TCalTime &, class TCalTime &, class TTime)

